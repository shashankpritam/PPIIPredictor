{"message":"this file contains an unclosed delimiter","code":null,"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":1232,"byte_end":1233,"line_start":64,"line_end":64,"column_start":77,"column_end":78,"is_primary":false,"text":[{"text":"pub fn parse_pdb_file(file_path: &str) -> Result<Structure, Box<dyn Error>> {","highlight_start":77,"highlight_end":78}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":1694,"byte_end":1695,"line_start":85,"line_end":85,"column_start":32,"column_end":33,"is_primary":false,"text":[{"text":"    for line in reader.lines() {","highlight_start":32,"highlight_end":33}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":2240,"byte_end":2241,"line_start":101,"line_end":101,"column_start":36,"column_end":37,"is_primary":false,"text":[{"text":"            \"ATOM  \" | \"HETATM\" => {","highlight_start":36,"highlight_end":37}],"label":"this delimiter might not be properly closed...","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":3730,"byte_end":3731,"line_start":128,"line_end":128,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"},","highlight_start":1,"highlight_end":2}],"label":"...as it matches this but it has different indentation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":5653,"byte_end":5653,"line_start":197,"line_end":197,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: this file contains an unclosed delimiter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:197:2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn parse_pdb_file(file_path: &str) -> Result<Structure, Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for line in reader.lines() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"ATOM  \" | \"HETATM\" => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis delimiter might not be properly closed...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m},\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...as it matches this but it has different indentation\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"message":"binary operation `==` cannot be applied to type `Vec<pdb_parser::Chain>`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":400,"byte_end":411,"line_start":21,"line_end":21,"column_start":16,"column_end":27,"is_primary":false,"text":[{"text":"            && self.chains == other.chains","highlight_start":16,"highlight_end":27}],"label":"Vec<pdb_parser::Chain>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":415,"byte_end":427,"line_start":21,"line_end":21,"column_start":31,"column_end":43,"is_primary":false,"text":[{"text":"            && self.chains == other.chains","highlight_start":31,"highlight_end":43}],"label":"Vec<pdb_parser::Chain>","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":412,"byte_end":414,"line_start":21,"line_end":21,"column_start":28,"column_end":30,"is_primary":true,"text":[{"text":"            && self.chains == other.chains","highlight_start":28,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: binary operation `==` cannot be applied to type `Vec<pdb_parser::Chain>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:21:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            && self.chains == other.chains\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mVec<pdb_parser::Chain>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mVec<pdb_parser::Chain>\u001b[0m\n\n"}
{"message":"the trait bound `f32: Eq` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":1010,"byte_end":1020,"line_start":55,"line_end":55,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    pub x: f32,","highlight_start":5,"highlight_end":15}],"label":"the trait `Eq` is not implemented for `f32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":797,"byte_end":799,"line_start":46,"line_end":46,"column_start":24,"column_end":26,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, Eq, PartialEq, PartialOrd)]","highlight_start":24,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Eq)]","def_site_span":{"file_name":"/rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/core/src/cmp.rs","byte_start":10076,"byte_end":10088,"line_start":302,"line_end":302,"column_start":1,"column_end":13,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Eq`:\n  i128\n  i16\n  i32\n  i64\n  i8\n  isize\n  u128\n  u16\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `AssertParamIsEq`","code":null,"level":"note","spans":[{"file_name":"/rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/core/src/cmp.rs","byte_start":10449,"byte_end":10491,"line_start":313,"line_end":313,"column_start":1,"column_end":43,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `f32: Eq` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:55:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Debug, Clone, Eq, PartialEq, PartialOrd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this derive macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub x: f32,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Eq` is not implemented for `f32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `Eq`:\u001b[0m\n\u001b[0m             i128\u001b[0m\n\u001b[0m             i16\u001b[0m\n\u001b[0m             i32\u001b[0m\n\u001b[0m             i64\u001b[0m\n\u001b[0m             i8\u001b[0m\n\u001b[0m             isize\u001b[0m\n\u001b[0m             u128\u001b[0m\n\u001b[0m             u16\u001b[0m\n\u001b[0m           and 4 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `AssertParamIsEq`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/rustc/9eb3afe9ebe9c7d2b84b71002d44f4a0edac95e0/library/core/src/cmp.rs:313:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":1667,"byte_end":5653,"line_start":85,"line_end":197,"column_start":5,"column_end":2,"is_primary":true,"text":[{"text":"    for line in reader.lines() {","highlight_start":5,"highlight_end":33},{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match record_type.as_ref() {","highlight_start":1,"highlight_end":37},{"text":"            \"MODEL \" => {","highlight_start":1,"highlight_end":26},{"text":"                current_model = Model {","highlight_start":1,"highlight_end":40},{"text":"                    serial_number: line?","highlight_start":1,"highlight_end":41},{"text":"                        .chars()","highlight_start":1,"highlight_end":33},{"text":"                        .skip(10)","highlight_start":1,"highlight_end":34},{"text":"                        .take(4)","highlight_start":1,"highlight_end":33},{"text":"                        .collect::<String>()","highlight_start":1,"highlight_end":45},{"text":"                        .trim()","highlight_start":1,"highlight_end":32},{"text":"                        .parse::<isize>()?,","highlight_start":1,"highlight_end":44},{"text":"                    chains: Vec::new(),","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            \"ATOM  \" | \"HETATM\" => {","highlight_start":1,"highlight_end":37},{"text":"    let atom = Atom {","highlight_start":1,"highlight_end":22},{"text":"        serial: line?.chars().skip(6).take(5).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":83},{"text":"        name: line?.chars().skip(12).take(4).collect(),","highlight_start":1,"highlight_end":56},{"text":"        alt_loc: line?.chars().nth(16).unwrap_or(' '),","highlight_start":1,"highlight_end":55},{"text":"        res_name: line?.chars().skip(17).take(3).collect(),","highlight_start":1,"highlight_end":60},{"text":"        chain_id: line?.chars().nth(21).unwrap_or(' '),","highlight_start":1,"highlight_end":56},{"text":"        res_seq: line?.chars().skip(22).take(4).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":85},{"text":"        icode: line?.chars().nth(26).unwrap_or(' '),","highlight_start":1,"highlight_end":53},{"text":"        x: line?.chars().skip(30).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        y: line?.chars().skip(38).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        z: line?.chars().skip(46).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        occupancy: line?.chars().skip(54).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":87},{"text":"        temp_factor: line?.chars().skip(60).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":89},{"text":"        element: line?.chars().skip(76).take(2).collect(),","highlight_start":1,"highlight_end":59},{"text":"        charge: line?.chars().skip(78).take(2).collect(),","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    if let Some(index) = current_chain.residues.iter().position(|r| r.id == current_residue.id) {","highlight_start":1,"highlight_end":98},{"text":"        // residue exists, add atom to it","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues[index].atoms.push(atom);","highlight_start":1,"highlight_end":56},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        // residue does not exist, create new residue and add atom to it","highlight_start":1,"highlight_end":73},{"text":"        current_residue.atoms.push(atom);","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    current_residue.id = atom.res_seq;","highlight_start":1,"highlight_end":39},{"text":"    current_residue.name = atom.res_name.clone();","highlight_start":1,"highlight_end":50},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"TER   \" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"ENDMDL\" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    structure.models.push(current_model.clone());","highlight_start":1,"highlight_end":50},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_model = Model {","highlight_start":1,"highlight_end":28},{"text":"        serial_number: current_model.serial_number + 1,","highlight_start":1,"highlight_end":56},{"text":"        chains: Vec::new(),","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"_ => (),","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn parse_atom(line: &str) -> Atom {","highlight_start":1,"highlight_end":40},{"text":"    let serial: isize = line[6..11].trim().parse().unwrap();","highlight_start":1,"highlight_end":61},{"text":"    let name = line[12..16].trim().to_string();","highlight_start":1,"highlight_end":48},{"text":"    let alt_loc = line[16..17].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":62},{"text":"    let res_name = line[17..20].trim().to_string();","highlight_start":1,"highlight_end":52},{"text":"    let chain_id = line[21..22].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":63},{"text":"    let res_seq: isize = line[22..26].trim().parse().unwrap();","highlight_start":1,"highlight_end":63},{"text":"    let icode = line[26..27].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":60},{"text":"    let x: f32 = line[30..38].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let y: f32 = line[38..46].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let z: f32 = line[46..54].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let occupancy: f32 = line[54..60].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":69},{"text":"    let temp_factor: f32 = line[60..66].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":71},{"text":"    let element = line[76..78].trim().to_string();","highlight_start":1,"highlight_end":51},{"text":"    let charge = line[78..80].trim().to_string();","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Atom {","highlight_start":1,"highlight_end":11},{"text":"        serial,","highlight_start":1,"highlight_end":16},{"text":"        name,","highlight_start":1,"highlight_end":14},{"text":"        alt_loc,","highlight_start":1,"highlight_end":17},{"text":"        res_name,","highlight_start":1,"highlight_end":18},{"text":"        chain_id,","highlight_start":1,"highlight_end":18},{"text":"        res_seq,","highlight_start":1,"highlight_end":17},{"text":"        icode,","highlight_start":1,"highlight_end":15},{"text":"        x,","highlight_start":1,"highlight_end":11},{"text":"        y,","highlight_start":1,"highlight_end":11},{"text":"        z,","highlight_start":1,"highlight_end":11},{"text":"        occupancy,","highlight_start":1,"highlight_end":19},{"text":"        temp_factor,","highlight_start":1,"highlight_end":21},{"text":"        element,","highlight_start":1,"highlight_end":17},{"text":"        charge,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"expected enum `Result`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":1667,"byte_end":5653,"line_start":85,"line_end":197,"column_start":5,"column_end":2,"is_primary":false,"text":[{"text":"    for line in reader.lines() {","highlight_start":5,"highlight_end":33},{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match record_type.as_ref() {","highlight_start":1,"highlight_end":37},{"text":"            \"MODEL \" => {","highlight_start":1,"highlight_end":26},{"text":"                current_model = Model {","highlight_start":1,"highlight_end":40},{"text":"                    serial_number: line?","highlight_start":1,"highlight_end":41},{"text":"                        .chars()","highlight_start":1,"highlight_end":33},{"text":"                        .skip(10)","highlight_start":1,"highlight_end":34},{"text":"                        .take(4)","highlight_start":1,"highlight_end":33},{"text":"                        .collect::<String>()","highlight_start":1,"highlight_end":45},{"text":"                        .trim()","highlight_start":1,"highlight_end":32},{"text":"                        .parse::<isize>()?,","highlight_start":1,"highlight_end":44},{"text":"                    chains: Vec::new(),","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            \"ATOM  \" | \"HETATM\" => {","highlight_start":1,"highlight_end":37},{"text":"    let atom = Atom {","highlight_start":1,"highlight_end":22},{"text":"        serial: line?.chars().skip(6).take(5).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":83},{"text":"        name: line?.chars().skip(12).take(4).collect(),","highlight_start":1,"highlight_end":56},{"text":"        alt_loc: line?.chars().nth(16).unwrap_or(' '),","highlight_start":1,"highlight_end":55},{"text":"        res_name: line?.chars().skip(17).take(3).collect(),","highlight_start":1,"highlight_end":60},{"text":"        chain_id: line?.chars().nth(21).unwrap_or(' '),","highlight_start":1,"highlight_end":56},{"text":"        res_seq: line?.chars().skip(22).take(4).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":85},{"text":"        icode: line?.chars().nth(26).unwrap_or(' '),","highlight_start":1,"highlight_end":53},{"text":"        x: line?.chars().skip(30).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        y: line?.chars().skip(38).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        z: line?.chars().skip(46).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        occupancy: line?.chars().skip(54).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":87},{"text":"        temp_factor: line?.chars().skip(60).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":89},{"text":"        element: line?.chars().skip(76).take(2).collect(),","highlight_start":1,"highlight_end":59},{"text":"        charge: line?.chars().skip(78).take(2).collect(),","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    if let Some(index) = current_chain.residues.iter().position(|r| r.id == current_residue.id) {","highlight_start":1,"highlight_end":98},{"text":"        // residue exists, add atom to it","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues[index].atoms.push(atom);","highlight_start":1,"highlight_end":56},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        // residue does not exist, create new residue and add atom to it","highlight_start":1,"highlight_end":73},{"text":"        current_residue.atoms.push(atom);","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    current_residue.id = atom.res_seq;","highlight_start":1,"highlight_end":39},{"text":"    current_residue.name = atom.res_name.clone();","highlight_start":1,"highlight_end":50},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"TER   \" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"ENDMDL\" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    structure.models.push(current_model.clone());","highlight_start":1,"highlight_end":50},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_model = Model {","highlight_start":1,"highlight_end":28},{"text":"        serial_number: current_model.serial_number + 1,","highlight_start":1,"highlight_end":56},{"text":"        chains: Vec::new(),","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"_ => (),","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn parse_atom(line: &str) -> Atom {","highlight_start":1,"highlight_end":40},{"text":"    let serial: isize = line[6..11].trim().parse().unwrap();","highlight_start":1,"highlight_end":61},{"text":"    let name = line[12..16].trim().to_string();","highlight_start":1,"highlight_end":48},{"text":"    let alt_loc = line[16..17].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":62},{"text":"    let res_name = line[17..20].trim().to_string();","highlight_start":1,"highlight_end":52},{"text":"    let chain_id = line[21..22].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":63},{"text":"    let res_seq: isize = line[22..26].trim().parse().unwrap();","highlight_start":1,"highlight_end":63},{"text":"    let icode = line[26..27].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":60},{"text":"    let x: f32 = line[30..38].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let y: f32 = line[38..46].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let z: f32 = line[46..54].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let occupancy: f32 = line[54..60].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":69},{"text":"    let temp_factor: f32 = line[60..66].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":71},{"text":"    let element = line[76..78].trim().to_string();","highlight_start":1,"highlight_end":51},{"text":"    let charge = line[78..80].trim().to_string();","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Atom {","highlight_start":1,"highlight_end":11},{"text":"        serial,","highlight_start":1,"highlight_end":16},{"text":"        name,","highlight_start":1,"highlight_end":14},{"text":"        alt_loc,","highlight_start":1,"highlight_end":17},{"text":"        res_name,","highlight_start":1,"highlight_end":18},{"text":"        chain_id,","highlight_start":1,"highlight_end":18},{"text":"        res_seq,","highlight_start":1,"highlight_end":17},{"text":"        icode,","highlight_start":1,"highlight_end":15},{"text":"        x,","highlight_start":1,"highlight_end":11},{"text":"        y,","highlight_start":1,"highlight_end":11},{"text":"        z,","highlight_start":1,"highlight_end":11},{"text":"        occupancy,","highlight_start":1,"highlight_end":19},{"text":"        temp_factor,","highlight_start":1,"highlight_end":21},{"text":"        element,","highlight_start":1,"highlight_end":17},{"text":"        charge,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pdb_parser.rs","byte_start":1198,"byte_end":1231,"line_start":64,"line_end":64,"column_start":43,"column_end":76,"is_primary":false,"text":[{"text":"pub fn parse_pdb_file(file_path: &str) -> Result<Structure, Box<dyn Error>> {","highlight_start":43,"highlight_end":76}],"label":"expected `Result<Structure, Box<(dyn std::error::Error + 'static)>>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"  expected enum `Result<Structure, Box<(dyn std::error::Error + 'static)>>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the function expects a value to always be returned, but loops might run zero times","code":null,"level":"note","spans":[{"file_name":"src/pdb_parser.rs","byte_start":1667,"byte_end":1693,"line_start":85,"line_end":85,"column_start":5,"column_end":31,"is_primary":true,"text":[{"text":"    for line in reader.lines() {","highlight_start":5,"highlight_end":31}],"label":"this might have zero elements to iterate on","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":1667,"byte_end":5653,"line_start":85,"line_end":197,"column_start":5,"column_end":2,"is_primary":false,"text":[{"text":"    for line in reader.lines() {","highlight_start":5,"highlight_end":33},{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match record_type.as_ref() {","highlight_start":1,"highlight_end":37},{"text":"            \"MODEL \" => {","highlight_start":1,"highlight_end":26},{"text":"                current_model = Model {","highlight_start":1,"highlight_end":40},{"text":"                    serial_number: line?","highlight_start":1,"highlight_end":41},{"text":"                        .chars()","highlight_start":1,"highlight_end":33},{"text":"                        .skip(10)","highlight_start":1,"highlight_end":34},{"text":"                        .take(4)","highlight_start":1,"highlight_end":33},{"text":"                        .collect::<String>()","highlight_start":1,"highlight_end":45},{"text":"                        .trim()","highlight_start":1,"highlight_end":32},{"text":"                        .parse::<isize>()?,","highlight_start":1,"highlight_end":44},{"text":"                    chains: Vec::new(),","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            \"ATOM  \" | \"HETATM\" => {","highlight_start":1,"highlight_end":37},{"text":"    let atom = Atom {","highlight_start":1,"highlight_end":22},{"text":"        serial: line?.chars().skip(6).take(5).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":83},{"text":"        name: line?.chars().skip(12).take(4).collect(),","highlight_start":1,"highlight_end":56},{"text":"        alt_loc: line?.chars().nth(16).unwrap_or(' '),","highlight_start":1,"highlight_end":55},{"text":"        res_name: line?.chars().skip(17).take(3).collect(),","highlight_start":1,"highlight_end":60},{"text":"        chain_id: line?.chars().nth(21).unwrap_or(' '),","highlight_start":1,"highlight_end":56},{"text":"        res_seq: line?.chars().skip(22).take(4).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":85},{"text":"        icode: line?.chars().nth(26).unwrap_or(' '),","highlight_start":1,"highlight_end":53},{"text":"        x: line?.chars().skip(30).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        y: line?.chars().skip(38).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        z: line?.chars().skip(46).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        occupancy: line?.chars().skip(54).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":87},{"text":"        temp_factor: line?.chars().skip(60).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":89},{"text":"        element: line?.chars().skip(76).take(2).collect(),","highlight_start":1,"highlight_end":59},{"text":"        charge: line?.chars().skip(78).take(2).collect(),","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    if let Some(index) = current_chain.residues.iter().position(|r| r.id == current_residue.id) {","highlight_start":1,"highlight_end":98},{"text":"        // residue exists, add atom to it","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues[index].atoms.push(atom);","highlight_start":1,"highlight_end":56},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        // residue does not exist, create new residue and add atom to it","highlight_start":1,"highlight_end":73},{"text":"        current_residue.atoms.push(atom);","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    current_residue.id = atom.res_seq;","highlight_start":1,"highlight_end":39},{"text":"    current_residue.name = atom.res_name.clone();","highlight_start":1,"highlight_end":50},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"TER   \" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"ENDMDL\" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    structure.models.push(current_model.clone());","highlight_start":1,"highlight_end":50},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_model = Model {","highlight_start":1,"highlight_end":28},{"text":"        serial_number: current_model.serial_number + 1,","highlight_start":1,"highlight_end":56},{"text":"        chains: Vec::new(),","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"_ => (),","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn parse_atom(line: &str) -> Atom {","highlight_start":1,"highlight_end":40},{"text":"    let serial: isize = line[6..11].trim().parse().unwrap();","highlight_start":1,"highlight_end":61},{"text":"    let name = line[12..16].trim().to_string();","highlight_start":1,"highlight_end":48},{"text":"    let alt_loc = line[16..17].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":62},{"text":"    let res_name = line[17..20].trim().to_string();","highlight_start":1,"highlight_end":52},{"text":"    let chain_id = line[21..22].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":63},{"text":"    let res_seq: isize = line[22..26].trim().parse().unwrap();","highlight_start":1,"highlight_end":63},{"text":"    let icode = line[26..27].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":60},{"text":"    let x: f32 = line[30..38].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let y: f32 = line[38..46].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let z: f32 = line[46..54].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let occupancy: f32 = line[54..60].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":69},{"text":"    let temp_factor: f32 = line[60..66].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":71},{"text":"    let element = line[76..78].trim().to_string();","highlight_start":1,"highlight_end":51},{"text":"    let charge = line[78..80].trim().to_string();","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Atom {","highlight_start":1,"highlight_end":11},{"text":"        serial,","highlight_start":1,"highlight_end":16},{"text":"        name,","highlight_start":1,"highlight_end":14},{"text":"        alt_loc,","highlight_start":1,"highlight_end":17},{"text":"        res_name,","highlight_start":1,"highlight_end":18},{"text":"        chain_id,","highlight_start":1,"highlight_end":18},{"text":"        res_seq,","highlight_start":1,"highlight_end":17},{"text":"        icode,","highlight_start":1,"highlight_end":15},{"text":"        x,","highlight_start":1,"highlight_end":11},{"text":"        y,","highlight_start":1,"highlight_end":11},{"text":"        z,","highlight_start":1,"highlight_end":11},{"text":"        occupancy,","highlight_start":1,"highlight_end":19},{"text":"        temp_factor,","highlight_start":1,"highlight_end":21},{"text":"        element,","highlight_start":1,"highlight_end":17},{"text":"        charge,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pdb_parser.rs","byte_start":1727,"byte_end":1728,"line_start":86,"line_end":86,"column_start":32,"column_end":33,"is_primary":false,"text":[{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":32,"highlight_end":33}],"label":"if the loop doesn't execute, this value would never get returned","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":1727,"byte_end":1728,"line_start":86,"line_end":86,"column_start":32,"column_end":33,"is_primary":false,"text":[{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":32,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pdb_parser.rs","byte_start":1909,"byte_end":1910,"line_start":91,"line_end":91,"column_start":40,"column_end":41,"is_primary":false,"text":[{"text":"                    serial_number: line?","highlight_start":40,"highlight_end":41}],"label":"if the loop doesn't execute, this value would never get returned","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":1909,"byte_end":1910,"line_start":91,"line_end":91,"column_start":40,"column_end":41,"is_primary":false,"text":[{"text":"                    serial_number: line?","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/pdb_parser.rs","byte_start":2129,"byte_end":2130,"line_start":97,"line_end":97,"column_start":42,"column_end":43,"is_primary":false,"text":[{"text":"                        .parse::<isize>()?,","highlight_start":42,"highlight_end":43}],"label":"if the loop doesn't execute, this value would never get returned","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":2129,"byte_end":2130,"line_start":97,"line_end":97,"column_start":42,"column_end":43,"is_primary":false,"text":[{"text":"                        .parse::<isize>()?,","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"if the loop doesn't execute, 21 other values would never get returned","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try adding an expression at the end of the block","code":null,"level":"help","spans":[{"file_name":"src/pdb_parser.rs","byte_start":5653,"byte_end":5653,"line_start":197,"line_end":197,"column_start":2,"column_end":2,"is_primary":true,"text":[{"text":"}","highlight_start":2,"highlight_end":2}],"label":null,"suggested_replacement":"\n    Ok(())","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/pdb_parser.rs","byte_start":1667,"byte_end":5653,"line_start":85,"line_end":197,"column_start":5,"column_end":2,"is_primary":false,"text":[{"text":"    for line in reader.lines() {","highlight_start":5,"highlight_end":33},{"text":"        let record_type = &line?.chars().take(6).collect::<String>();","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match record_type.as_ref() {","highlight_start":1,"highlight_end":37},{"text":"            \"MODEL \" => {","highlight_start":1,"highlight_end":26},{"text":"                current_model = Model {","highlight_start":1,"highlight_end":40},{"text":"                    serial_number: line?","highlight_start":1,"highlight_end":41},{"text":"                        .chars()","highlight_start":1,"highlight_end":33},{"text":"                        .skip(10)","highlight_start":1,"highlight_end":34},{"text":"                        .take(4)","highlight_start":1,"highlight_end":33},{"text":"                        .collect::<String>()","highlight_start":1,"highlight_end":45},{"text":"                        .trim()","highlight_start":1,"highlight_end":32},{"text":"                        .parse::<isize>()?,","highlight_start":1,"highlight_end":44},{"text":"                    chains: Vec::new(),","highlight_start":1,"highlight_end":40},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            \"ATOM  \" | \"HETATM\" => {","highlight_start":1,"highlight_end":37},{"text":"    let atom = Atom {","highlight_start":1,"highlight_end":22},{"text":"        serial: line?.chars().skip(6).take(5).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":83},{"text":"        name: line?.chars().skip(12).take(4).collect(),","highlight_start":1,"highlight_end":56},{"text":"        alt_loc: line?.chars().nth(16).unwrap_or(' '),","highlight_start":1,"highlight_end":55},{"text":"        res_name: line?.chars().skip(17).take(3).collect(),","highlight_start":1,"highlight_end":60},{"text":"        chain_id: line?.chars().nth(21).unwrap_or(' '),","highlight_start":1,"highlight_end":56},{"text":"        res_seq: line?.chars().skip(22).take(4).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":85},{"text":"        icode: line?.chars().nth(26).unwrap_or(' '),","highlight_start":1,"highlight_end":53},{"text":"        x: line?.chars().skip(30).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        y: line?.chars().skip(38).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        z: line?.chars().skip(46).take(8).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":79},{"text":"        occupancy: line?.chars().skip(54).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":87},{"text":"        temp_factor: line?.chars().skip(60).take(6).collect::<String>().trim().parse()?,","highlight_start":1,"highlight_end":89},{"text":"        element: line?.chars().skip(76).take(2).collect(),","highlight_start":1,"highlight_end":59},{"text":"        charge: line?.chars().skip(78).take(2).collect(),","highlight_start":1,"highlight_end":58},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    if let Some(index) = current_chain.residues.iter().position(|r| r.id == current_residue.id) {","highlight_start":1,"highlight_end":98},{"text":"        // residue exists, add atom to it","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues[index].atoms.push(atom);","highlight_start":1,"highlight_end":56},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        // residue does not exist, create new residue and add atom to it","highlight_start":1,"highlight_end":73},{"text":"        current_residue.atoms.push(atom);","highlight_start":1,"highlight_end":42},{"text":"        current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":62},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    current_residue.id = atom.res_seq;","highlight_start":1,"highlight_end":39},{"text":"    current_residue.name = atom.res_name.clone();","highlight_start":1,"highlight_end":50},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"TER   \" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"\"ENDMDL\" => {","highlight_start":1,"highlight_end":14},{"text":"    current_chain.residues.push(current_residue.clone());","highlight_start":1,"highlight_end":58},{"text":"    current_model.chains.push(current_chain.clone());","highlight_start":1,"highlight_end":54},{"text":"    structure.models.push(current_model.clone());","highlight_start":1,"highlight_end":50},{"text":"    current_residue = Residue {","highlight_start":1,"highlight_end":32},{"text":"        name: String::new(),","highlight_start":1,"highlight_end":29},{"text":"        id: 0,","highlight_start":1,"highlight_end":15},{"text":"        atoms: Vec::new(),","highlight_start":1,"highlight_end":27},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_chain = Chain {","highlight_start":1,"highlight_end":28},{"text":"        id: ' ',","highlight_start":1,"highlight_end":17},{"text":"        residues: Vec::new(),","highlight_start":1,"highlight_end":30},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    current_model = Model {","highlight_start":1,"highlight_end":28},{"text":"        serial_number: current_model.serial_number + 1,","highlight_start":1,"highlight_end":56},{"text":"        chains: Vec::new(),","highlight_start":1,"highlight_end":28},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"},","highlight_start":1,"highlight_end":3},{"text":"_ => (),","highlight_start":1,"highlight_end":9},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn parse_atom(line: &str) -> Atom {","highlight_start":1,"highlight_end":40},{"text":"    let serial: isize = line[6..11].trim().parse().unwrap();","highlight_start":1,"highlight_end":61},{"text":"    let name = line[12..16].trim().to_string();","highlight_start":1,"highlight_end":48},{"text":"    let alt_loc = line[16..17].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":62},{"text":"    let res_name = line[17..20].trim().to_string();","highlight_start":1,"highlight_end":52},{"text":"    let chain_id = line[21..22].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":63},{"text":"    let res_seq: isize = line[22..26].trim().parse().unwrap();","highlight_start":1,"highlight_end":63},{"text":"    let icode = line[26..27].chars().next().unwrap_or(' ');","highlight_start":1,"highlight_end":60},{"text":"    let x: f32 = line[30..38].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let y: f32 = line[38..46].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let z: f32 = line[46..54].trim().parse().unwrap();","highlight_start":1,"highlight_end":55},{"text":"    let occupancy: f32 = line[54..60].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":69},{"text":"    let temp_factor: f32 = line[60..66].trim().parse().unwrap_or(0.0);","highlight_start":1,"highlight_end":71},{"text":"    let element = line[76..78].trim().to_string();","highlight_start":1,"highlight_end":51},{"text":"    let charge = line[78..80].trim().to_string();","highlight_start":1,"highlight_end":50},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Atom {","highlight_start":1,"highlight_end":11},{"text":"        serial,","highlight_start":1,"highlight_end":16},{"text":"        name,","highlight_start":1,"highlight_end":14},{"text":"        alt_loc,","highlight_start":1,"highlight_end":17},{"text":"        res_name,","highlight_start":1,"highlight_end":18},{"text":"        chain_id,","highlight_start":1,"highlight_end":18},{"text":"        res_seq,","highlight_start":1,"highlight_end":17},{"text":"        icode,","highlight_start":1,"highlight_end":15},{"text":"        x,","highlight_start":1,"highlight_end":11},{"text":"        y,","highlight_start":1,"highlight_end":11},{"text":"        z,","highlight_start":1,"highlight_end":11},{"text":"        occupancy,","highlight_start":1,"highlight_end":19},{"text":"        temp_factor,","highlight_start":1,"highlight_end":21},{"text":"        element,","highlight_start":1,"highlight_end":17},{"text":"        charge,","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `for` loop","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:85:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0mpub fn parse_pdb_file(file_path: &str) -> Result<Structure, Box<dyn Error>> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<Structure, Box<(dyn std::error::Error + 'static)>>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for line in reader.lines() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let record_type = &line?.chars().take(6).collect::<String>();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match record_type.as_ref() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected enum `Result`, found `()`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:   expected enum `\u001b[0m\u001b[0m\u001b[1mResult<Structure, Box<(dyn std::error::Error + 'static)>>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the function expects a value to always be returned, but loops might run zero times\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:85:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for line in reader.lines() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthis might have zero elements to iterate on\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let record_type = &line?.chars().take(6).collect::<String>();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mif the loop doesn't execute, this value would never get returned\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    serial_number: line?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mif the loop doesn't execute, this value would never get returned\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .parse::<isize>()?,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mif the loop doesn't execute, this value would never get returned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if the loop doesn't execute, 21 other values would never get returned\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: return a value for the case when the loop has zero elements to iterate on, or consider changing the return type to account for that possibility\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding an expression at the end of the block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+     Ok(())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308, E0369.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0369.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
