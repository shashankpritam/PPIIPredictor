{"message":"this function takes 0 arguments but 2 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":11514,"byte_end":11521,"line_start":334,"line_end":334,"column_start":31,"column_end":38,"is_primary":false,"text":[{"text":"        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();","highlight_start":31,"highlight_end":38}],"label":"argument of type `&Vec<[f64; 3]>` unexpected","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":11523,"byte_end":11549,"line_start":334,"line_end":334,"column_start":40,"column_end":66,"is_primary":false,"text":[{"text":"        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();","highlight_start":40,"highlight_end":66}],"label":"argument unexpected","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pdb_parser.rs","byte_start":11502,"byte_end":11513,"line_start":334,"line_end":334,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/Users/shashankpritam/.cargo/registry/src/github.com-1ecc6299db9ec823/kiddo-2.0.1/src/fixed/kdtree.rs","byte_start":5765,"byte_end":5768,"line_start":181,"line_end":181,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn new() -> Self {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"remove the extra arguments","code":null,"level":"help","spans":[{"file_name":"src/pdb_parser.rs","byte_start":11513,"byte_end":11550,"line_start":334,"line_end":334,"column_start":30,"column_end":67,"is_primary":true,"text":[{"text":"        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();","highlight_start":30,"highlight_end":67}],"label":null,"suggested_replacement":"()","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 0 arguments but 2 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:334:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument unexpected\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument of type `&Vec<[f64; 3]>` unexpected\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/shashankpritam/.cargo/registry/src/github.com-1ecc6299db9ec823/kiddo-2.0.1/src/fixed/kdtree.rs:181:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new() -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove the extra arguments\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let kdt = KdTree::new\u001b[0m\u001b[0m\u001b[38;5;10m()\u001b[0m\u001b[0m.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m~~\u001b[0m\n\n"}
{"message":"no method named `unwrap` found for struct `KdTree` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":11551,"byte_end":11557,"line_start":334,"line_end":334,"column_start":68,"column_end":74,"is_primary":true,"text":[{"text":"        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();","highlight_start":68,"highlight_end":74}],"label":"method not found in `KdTree<_, _, _, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `unwrap` found for struct `KdTree` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:334:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m334\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let kdt = KdTree::new(&coords, (0..atoms.len()).collect()).unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `KdTree<_, _, _, _, _>`\u001b[0m\n\n"}
{"message":"the method `within` exists for struct `KdTree<[f64; 3], usize, 3, 32, u32>`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/pdb_parser.rs","byte_start":11802,"byte_end":11808,"line_start":341,"line_end":341,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"            .within(&coords, radius, &squared_euclidean)","highlight_start":14,"highlight_end":20}],"label":"method cannot be called on `KdTree<[f64; 3], usize, 3, 32, u32>` due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: fixed::traits::Fixed`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: fixed::helpers::Sealed`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: fixed::traits::FixedOptionalFeatures`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<fixed::F128Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<fixed::F128Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<fixed::f128::private::F128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<fixed::f128::private::F128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<f64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<f64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<f32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<f32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<half::bfloat::bf16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<half::bfloat::bf16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<half::binary16::f16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<half::binary16::f16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<usize>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<usize>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<u128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<u128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<u64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<u64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<u16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<u16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<u8>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<u8>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<isize>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<isize>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<i128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<i128>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<i64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<i64>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<i32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<i32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<i16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<i16>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialOrd<i8>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: PartialEq<i8>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Product`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Sum`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: ShrAssign<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Shr<u32>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Shr<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: ShlAssign<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Shl<u32>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Shl<u32>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitXorAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as BitXor>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitXor`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitOrAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as BitOr>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitOr`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitAndAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as BitAnd>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: BitAnd`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Not>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Not`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: RemAssign<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Rem<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Rem<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: RemAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Rem<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Rem<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: DivAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Div<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Div<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: MulAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Mul<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Mul<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: RemAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Rem>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Rem`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: DivAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Div>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Div`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: MulAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Mul>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Mul`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: SubAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Sub>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Sub`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: AddAssign`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as Add>::Output = [f64; 3]`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Add`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: fixed::traits::ToFixed`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: fixed::traits::FromFixed`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`<[f64; 3] as FromStr>::Err = fixed::from_str::ParseFixedError`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: FromStr`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: UpperHex`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: LowerHex`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Octal`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Binary`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: UpperExp`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: LowerExp`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: std::fmt::Display`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: bytemuck::transparent::TransparentWrapper<<[f64; 3] as fixed::traits::Fixed>::Bits>`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: bytemuck::contiguous::Contiguous`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Ord`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Eq`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\n`[f64; 3]: Hash`\nwhich is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `within` exists for struct `KdTree<[f64; 3], usize, 3, 32, u32>`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pdb_parser.rs:341:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .within(&coords, radius, &squared_euclidean)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called on `KdTree<[f64; 3], usize, 3, 32, u32>` due to unsatisfied trait bounds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: fixed::traits::Fixed`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: fixed::helpers::Sealed`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: fixed::traits::FixedOptionalFeatures`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<fixed::F128Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<fixed::F128Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<fixed::f128::private::F128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<fixed::f128::private::F128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<f64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<f64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<f32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<f32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<half::bfloat::bf16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<half::bfloat::bf16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<half::binary16::f16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<half::binary16::f16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<usize>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<usize>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<u128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<u128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<u64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<u64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<u16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<u16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<u8>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<u8>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<isize>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<isize>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<i128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<i128>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<i64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<i64>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<i32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<i32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<i16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<i16>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialOrd<i8>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: PartialEq<i8>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Product`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Sum`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: ShrAssign<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Shr<u32>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Shr<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: ShlAssign<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Shl<u32>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Shl<u32>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitXorAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as BitXor>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitXor`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitOrAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as BitOr>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitOr`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitAndAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as BitAnd>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: BitAnd`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Not>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Not`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: RemAssign<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Rem<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Rem<<[f64; 3] as fixed::traits::Fixed>::NonZeroBits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: RemAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Rem<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Rem<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: DivAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Div<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Div<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: MulAssign<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Mul<<[f64; 3] as fixed::traits::Fixed>::Bits>>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Mul<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: RemAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Rem>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Rem`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: DivAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Div>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Div`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: MulAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Mul>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Mul`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: SubAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Sub>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Sub`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: AddAssign`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as Add>::Output = [f64; 3]`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Add`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: fixed::traits::ToFixed`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: fixed::traits::FromFixed`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `<[f64; 3] as FromStr>::Err = fixed::from_str::ParseFixedError`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: FromStr`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: UpperHex`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: LowerHex`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Octal`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Binary`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: UpperExp`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: LowerExp`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: std::fmt::Display`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: bytemuck::transparent::TransparentWrapper<<[f64; 3] as fixed::traits::Fixed>::Bits>`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: bytemuck::contiguous::Contiguous`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Ord`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Eq`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\u001b[0m            `[f64; 3]: Hash`\u001b[0m\n\u001b[0m            which is required by `[f64; 3]: kiddo::fixed::kdtree::Axis`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
